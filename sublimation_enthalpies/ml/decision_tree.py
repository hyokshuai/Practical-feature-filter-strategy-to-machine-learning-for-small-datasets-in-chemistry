import numpy as npimport pandas as pdimport matplotlib.pyplot as pltfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_errorimport joblibfrom sklearn.tree import DecisionTreeRegressorfrom sklearn.model_selection import train_test_split, GridSearchCVfrom sklearn.preprocessing import MinMaxScaler# Load and clean datadata = pd.read_excel('data_200.xlsx')data_pre = pd.read_excel('prediction.xlsx')# Data cleaningdata = data[~data['enthalpy'].isin(['NAN'])]data = data.dropna(axis=0, how='any')# Define features and target# 6D input#columns=["number_atoms","R_1","R_2","en_1","en_2","Tm"]# 7D input#columns=["R_1","R_2","m_1","m_2","en_1","en_2","Tm"]# 8D inputcolumns = ["number_atoms", "R_1", "R_2", "m_1", "m_2", "en_1", "en_2", "Tm"]final_data = data[columns]target_set = np.asarray(data['enthalpy']).astype(np.float32)# Feature scalingscaler = MinMaxScaler(feature_range=(0, 1))X_train = scaler.fit_transform(final_data.values)# Prepare prediction datasetdata_pre1 = data_pre[columns]X_test = scaler.transform(data_pre1.values)y_test = np.asarray(data_pre['enthalpy']).astype(np.float32)# Define parameter grid for GridSearchCVparam_grid = {#    'max_depth': range(1,10,1),#    'min_samples_split': range(2,10,1),#    'min_samples_leaf': range(1,10,1),#    'criterion':["squared_error", "friedman_mse", "absolute_error"],    'max_depth': [5],    'min_samples_split': [5],    'min_samples_leaf': [3],}# Create and tune the Decision Tree Regressor modelregressor = DecisionTreeRegressor()scoring = {    'neg_mean_absolute_error': 'neg_mean_absolute_error',    'neg_mean_squared_error': 'neg_mean_squared_error',    'r2': 'r2',}grid_search = GridSearchCV(regressor, param_grid, cv=3, scoring=scoring, refit='neg_mean_absolute_error')grid_search.fit(X_train, target_set)# Get the best model and parametersbest_model = grid_search.best_estimator_best_params = grid_search.best_params_print("Best Hyperparameters:", best_params)# Save the modelmodel_filename = 'best_decision_tree_model.pkl'joblib.dump(best_model, model_filename)# Make predictions and evaluate the modely_pred = best_model.predict(X_test)print("Prediction:", y_pred)print("True:", y_test)# Evaluation metricsmae = mean_absolute_error(y_test, y_pred)mse = mean_squared_error(y_test, y_pred)rmse = np.sqrt(mse)r_squared = r2_score(y_test, y_pred)print("Root Mean Squared Error (RMSE):", rmse)print("R-squared (RÂ²) score:", r_squared)print("Mean Absolute Error:", mae)print("Optimized Model - R-squared:", r_squared)# Save results to Excelprediction_df = pd.DataFrame({'True': y_test, 'Prediction': y_pred})prediction_df.to_excel('results.xlsx', index=False)# Plot resultsplt.figure(figsize=(10, 6))x = range(len(y_pred))plt.plot(x, y_test, color='red', alpha=0.3, label='True')plt.plot(x, y_pred, color='blue', alpha=0.3, label='Prediction')plt.ylabel('Sublimation Enthalpy')plt.xlabel('Values')plt.legend()plt.savefig("comparison.png", dpi=300)plt.show()